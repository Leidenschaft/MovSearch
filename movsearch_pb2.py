# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: movsearch.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='movsearch.proto',
  package='movsearch',
  syntax='proto3',
  serialized_pb=_b('\n\x0fmovsearch.proto\x12\tmovsearch\"4\n\x05Query\x12\x10\n\x08\x66ilename\x18\x01 \x01(\t\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\x12\x0b\n\x03num\x18\x03 \x01(\x05\"&\n\x06Result\x12\x0b\n\x03num\x18\x01 \x01(\x05\x12\x0f\n\x07reslist\x18\x02 \x01(\t2>\n\x0bSearchMovie\x12/\n\x06search\x12\x10.movsearch.Query\x1a\x11.movsearch.Result\"\x00\x32>\n\x0bSearchSound\x12/\n\x06search\x12\x10.movsearch.Query\x1a\x11.movsearch.Result\"\x00\x62\x06proto3')
)




_QUERY = _descriptor.Descriptor(
  name='Query',
  full_name='movsearch.Query',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filename', full_name='movsearch.Query.filename', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='movsearch.Query.data', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='num', full_name='movsearch.Query.num', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=30,
  serialized_end=82,
)


_RESULT = _descriptor.Descriptor(
  name='Result',
  full_name='movsearch.Result',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='num', full_name='movsearch.Result.num', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reslist', full_name='movsearch.Result.reslist', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=84,
  serialized_end=122,
)

DESCRIPTOR.message_types_by_name['Query'] = _QUERY
DESCRIPTOR.message_types_by_name['Result'] = _RESULT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Query = _reflection.GeneratedProtocolMessageType('Query', (_message.Message,), dict(
  DESCRIPTOR = _QUERY,
  __module__ = 'movsearch_pb2'
  # @@protoc_insertion_point(class_scope:movsearch.Query)
  ))
_sym_db.RegisterMessage(Query)

Result = _reflection.GeneratedProtocolMessageType('Result', (_message.Message,), dict(
  DESCRIPTOR = _RESULT,
  __module__ = 'movsearch_pb2'
  # @@protoc_insertion_point(class_scope:movsearch.Result)
  ))
_sym_db.RegisterMessage(Result)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class SearchMovieStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.search = channel.unary_unary(
          '/movsearch.SearchMovie/search',
          request_serializer=Query.SerializeToString,
          response_deserializer=Result.FromString,
          )


  class SearchMovieServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def search(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_SearchMovieServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'search': grpc.unary_unary_rpc_method_handler(
            servicer.search,
            request_deserializer=Query.FromString,
            response_serializer=Result.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'movsearch.SearchMovie', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class SearchSoundStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.search = channel.unary_unary(
          '/movsearch.SearchSound/search',
          request_serializer=Query.SerializeToString,
          response_deserializer=Result.FromString,
          )


  class SearchSoundServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def search(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_SearchSoundServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'search': grpc.unary_unary_rpc_method_handler(
            servicer.search,
            request_deserializer=Query.FromString,
            response_serializer=Result.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'movsearch.SearchSound', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaSearchMovieServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def search(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaSearchMovieStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def search(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    search.future = None


  def beta_create_SearchMovie_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('movsearch.SearchMovie', 'search'): Query.FromString,
    }
    response_serializers = {
      ('movsearch.SearchMovie', 'search'): Result.SerializeToString,
    }
    method_implementations = {
      ('movsearch.SearchMovie', 'search'): face_utilities.unary_unary_inline(servicer.search),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_SearchMovie_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('movsearch.SearchMovie', 'search'): Query.SerializeToString,
    }
    response_deserializers = {
      ('movsearch.SearchMovie', 'search'): Result.FromString,
    }
    cardinalities = {
      'search': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'movsearch.SearchMovie', cardinalities, options=stub_options)


  class BetaSearchSoundServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def search(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaSearchSoundStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def search(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    search.future = None


  def beta_create_SearchSound_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('movsearch.SearchSound', 'search'): Query.FromString,
    }
    response_serializers = {
      ('movsearch.SearchSound', 'search'): Result.SerializeToString,
    }
    method_implementations = {
      ('movsearch.SearchSound', 'search'): face_utilities.unary_unary_inline(servicer.search),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_SearchSound_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('movsearch.SearchSound', 'search'): Query.SerializeToString,
    }
    response_deserializers = {
      ('movsearch.SearchSound', 'search'): Result.FromString,
    }
    cardinalities = {
      'search': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'movsearch.SearchSound', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
